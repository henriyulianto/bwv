# .github/workflows/deploy.yml
name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: false  # We'll do it manually

    - name: Discover BWV submodules with exports
      id: discover
      run: |
        echo "üîç Discovering BWV submodules from .gitmodules..."
        
        # Get BWV submodules from .gitmodules file
        if [ -f .gitmodules ]; then
          ALL_BWV_SUBS=$(grep -E '^\[submodule "bwv' .gitmodules | sed 's/\[submodule "//;s/"\]//' | sort)
          echo "Found BWV submodules in .gitmodules: $ALL_BWV_SUBS"
        else
          echo "No .gitmodules file found"
          ALL_BWV_SUBS=""
        fi
        
        # Clone each submodule and check for exports directory
        VALID_SUBS=""
        for sub in $ALL_BWV_SUBS; do
          echo "‚¨áÔ∏è Cloning $sub with sparse checkout"
          git clone --filter=blob:none --sparse --no-checkout https://github.com/musicollator/$sub.git $sub
          cd $sub
          git sparse-checkout init --cone
          git sparse-checkout set exports/
          git read-tree -mu HEAD
          cd ..
          
          # Check if exports directory exists after cloning
          if [ -d "$sub/exports" ]; then
            echo "‚úÖ $sub has exports directory - including"
            VALID_SUBS="$VALID_SUBS $sub"
          else
            echo "‚ö†Ô∏è $sub does not have exports directory - skipping"
            rm -rf $sub  # Clean up since we won't use it
          fi
        done
        
        # Trim leading space and set output
        VALID_SUBS=$(echo $VALID_SUBS | sed 's/^ *//')
        echo "BWV_LIST=$VALID_SUBS" >> $GITHUB_OUTPUT
        echo "üìÅ Valid BWV submodules with exports: $VALID_SUBS"

    - name: Setup BWV Siegel (separate from numbered BWVs)
      id: setup-siegel
      run: |
        echo "üé≠ Setting up BWV Siegel with sparse checkout..."
        
        # Clone bwv-siegel with sparse checkout for export/ directory
        SIEGEL_AVAILABLE="false"
        
        echo "‚¨áÔ∏è Cloning bwv-siegel with sparse checkout"
        git clone --filter=blob:none --sparse --no-checkout https://github.com/musicollator/bwv-siegel.git bwv-siegel
        cd bwv-siegel
        git sparse-checkout init --cone
        git sparse-checkout set export/
        git read-tree -mu HEAD
        cd ..
        
        # Check if export directory exists after cloning
        if [ -d "bwv-siegel/export" ]; then
          echo "‚úÖ bwv-siegel has export directory - including"
          SIEGEL_AVAILABLE="true"
          
          echo "üìÇ Contents of bwv-siegel export directory:"
          ls -la bwv-siegel/export || echo "Could not list export directory"
          
          # Verify required files exist
          REQUIRED_FILES="bwv-siegel.js bwv-siegel.css bwv-siegel.html AngleCalculator.js siegel.svg"
          MISSING_FILES=""
          
          for file in $REQUIRED_FILES; do
            if [ ! -f "bwv-siegel/export/$file" ]; then
              MISSING_FILES="$MISSING_FILES $file"
            fi
          done
          
          if [ -n "$MISSING_FILES" ]; then
            echo "‚ö†Ô∏è Missing required files in bwv-siegel/export: $MISSING_FILES"
            SIEGEL_AVAILABLE="false"
          else
            echo "‚úÖ All required BWV Siegel files present"
          fi
        else
          echo "‚ö†Ô∏è bwv-siegel does not have export directory - skipping"
          rm -rf bwv-siegel  # Clean up since we won't use it
        fi
        
        echo "SIEGEL_AVAILABLE=$SIEGEL_AVAILABLE" >> $GITHUB_OUTPUT
        echo "üé≠ BWV Siegel available: $SIEGEL_AVAILABLE"

    - name: List contents of submodules
      run: |
        for sub in ${{ steps.discover.outputs.BWV_LIST }}; do
          echo "üßæ Files in $sub after sparse checkout:"
          ls -la $sub
          echo ""
          echo "üìÇ Contents of $sub exports directory:"
          ls -la $sub/exports || echo "No exports directory found"
          echo ""
        done
        
        # List BWV Siegel if available
        if [ "${{ steps.setup-siegel.outputs.SIEGEL_AVAILABLE }}" = "true" ]; then
          echo "üé≠ Files in bwv-siegel after sparse checkout:"
          ls -la bwv-siegel
          echo ""
          echo "üìÇ Contents of bwv-siegel export directory:"
          ls -la bwv-siegel/export || echo "No export directory found"
          echo ""
        fi

    - name: Create BWV metadata JSON
      run: |
        echo "üìù Creating bwvs.json with discovered BWV directories..."
        echo "{" > bwvs.json
        echo '  "bwvs": [' >> bwvs.json
        
        # Convert BWV_LIST to JSON array format
        FIRST=true
        for sub in ${{ steps.discover.outputs.BWV_LIST }}; do
          if [ "$FIRST" = true ]; then
            echo "    \"$sub\"" >> bwvs.json
            FIRST=false
          else
            echo "    ,\"$sub\"" >> bwvs.json
          fi
        done
        
        echo "  ]," >> bwvs.json
        echo "  \"count\": $(echo '${{ steps.discover.outputs.BWV_LIST }}' | wc -w)," >> bwvs.json
        echo "  \"siegel_available\": ${{ steps.setup-siegel.outputs.SIEGEL_AVAILABLE }}," >> bwvs.json
        echo "  \"generated\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"" >> bwvs.json
        echo "}" >> bwvs.json
        
        echo "üìÑ Generated bwvs.json:"
        cat bwvs.json

    - name: Create deployment directory
      run: |
        mkdir deploy
        cp index.html deploy/
        cp index.css deploy/
        cp index.js deploy/
        cp -r js deploy/
        cp bwvs.json deploy/
        cp -r media deploy/
        
        # Copy numbered BWV submodules
        for sub in ${{ steps.discover.outputs.BWV_LIST }}; do
          echo "üì¶ Copying numbered BWV $sub to deploy directory"
          cp -r $sub deploy/
        done
        
        # Copy BWV Siegel if available
        if [ "${{ steps.setup-siegel.outputs.SIEGEL_AVAILABLE }}" = "true" ]; then
          echo "üé≠ Copying bwv-siegel to deploy directory"
          cp -r bwv-siegel deploy/
        else
          echo "‚ö†Ô∏è Skipping bwv-siegel - not available"
        fi

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './deploy'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4